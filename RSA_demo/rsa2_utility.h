#ifndef RSA2_UTILITY_H
#define RSA2_UTILITY_H

#include <iostream>
#include <openssl/rsa.h>
#include <openssl/pem.h>
#include <openssl/err.h>

#define RSA_KEY_LENGTH 1024

class RSA2_Utility
{
public:
    RSA2_Utility();
    ~RSA2_Utility();
    RSA2_Utility(const RSA2_Utility& rhs)=delete;
    RSA2_Utility& operator=(const RSA2_Utility& rhs)=delete;

    /// 自动产生公钥\秘钥\模
    bool generate_rsa_key();

    /// 打开公钥\秘钥
    bool open_prikey_pubkey();

    bool open_prikey();

    bool open_pubkey();

    /// 加密\解密
    int pubkey_encrypt(int len,
                       const char* str,
                       char* str_en);

    int prikey_decrypt(int len,
                        const char* str,
                        char* str_de);

private:
    RSA *m_pubkey = nullptr;
    RSA *m_prikey = nullptr;
    RSA *m_test = nullptr;

    const uint8_t m_pubexpd[3] =
        {0x01, 0x00, 0x01};

    const uint8_t m_priexpd[128] =
        {0x57, 0x56, 0x16, 0xfa, 0x29, 0xfb, 0x60, 0x05, 0x9b, 0x8f, 0xfa, 0x40, 0xa8, 0xd7, 0x0f,
        0x07, 0x34, 0x95, 0x67, 0xdc, 0x77, 0xe6, 0x6b, 0x9c, 0xf0, 0x47, 0x5d, 0x80, 0xed, 0x7a,
        0x0d, 0x01, 0x87, 0x54, 0xce, 0x4b, 0x30, 0x49, 0x66, 0xcc, 0x6a, 0xab, 0xad, 0xb1, 0x71,
        0x0f, 0xf8, 0xc7, 0x68, 0xf7, 0xa1, 0x89, 0x8d, 0x7f, 0x33, 0x31, 0x29, 0x7a, 0x73, 0x97,
        0xa8, 0x26, 0x0c, 0x7e, 0xd0, 0x04, 0xc2, 0xa5, 0x11, 0x18, 0x14, 0x18, 0xc6, 0xca, 0x58,
        0x42, 0xe8, 0xab, 0x43, 0xb9, 0x27, 0xf6, 0x3c, 0xf5, 0x27, 0xd8, 0x18, 0xed, 0xf3, 0xd6,
        0xd9, 0xa8, 0x45, 0x75, 0x2d, 0xb5, 0xd2, 0x79, 0x15, 0xd9, 0x96, 0xd5, 0x3b, 0x98, 0x35,
        0x09, 0xb7, 0x1b, 0xd0, 0x95, 0xc0, 0x78, 0x93, 0x69, 0x14, 0x10, 0x12, 0x84, 0x6f, 0x13,
        0x85, 0xe3, 0xed, 0x2e, 0x20, 0x97, 0x59, 0xf9};
    const uint8_t m_module[128] =
        {0xc4, 0xb4, 0xcc, 0x76, 0xe2, 0x93, 0x6f, 0x3b, 0x2b, 0xb4, 0x3f, 0xb3, 0xbb, 0x71,
         0xd3, 0x53, 0xaa, 0x08, 0x61, 0x25, 0x12, 0x72, 0xb8, 0x41, 0xb3, 0x91, 0x20, 0xa4, 0x82,
         0xcc, 0x2a, 0xd3, 0x02, 0xbf, 0x74, 0xa4, 0x54, 0xda, 0x09, 0xba, 0x94, 0x8b, 0x38, 0x70,
         0x75, 0xf9, 0x5d, 0x72, 0x04, 0x9a, 0x05, 0x0a, 0xf4, 0x21, 0x28, 0x08, 0x8e, 0xb2, 0xa4,
         0x1d, 0xbc, 0x06, 0x72, 0x1a, 0xe2, 0x76, 0x9b, 0x24, 0x60, 0x32, 0x8a, 0x1d, 0x26, 0xaf,
         0x19, 0x22, 0x6c, 0x4e, 0x3b, 0x4d, 0x4c, 0x8c, 0xf3, 0xd7, 0x5e, 0x75, 0x09, 0x3e, 0xc3,
         0xdb, 0x99, 0xbd, 0xc5, 0x59, 0xb5, 0x52, 0x73, 0x86, 0xe5, 0xdc, 0x38, 0xbe, 0xa8, 0x6f,
         0xb8, 0x50, 0xeb, 0x78, 0x51, 0xb8, 0xa1, 0x50, 0x2a, 0x05, 0xaa, 0xa5, 0x5e, 0x1e, 0xc6,
         0xcc, 0x10, 0xe5, 0xa0, 0x6d, 0xb9, 0xd2, 0x61, 0x85};
    int m_publen = 3;
    int m_prilen = 128;
    int m_modlen = 128;

};

#endif // RSA2_UTILITY_H
